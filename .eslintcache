[{"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\index.js":"1","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\reportWebVitals.js":"2","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\App.js":"3","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\HomePage.js":"4","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\EmailPage.js":"5","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\NavBar.js":"6","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\email-content.js":"7","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\EmailListPage.js":"8","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\components\\EmailList.js":"9","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\PageNotFound.js":"10","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\components\\SentEmailList.js":"11","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\components\\ComposeEmailForm.js":"12","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\SentEmailPage.js":"13","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\EmptyContentPage.js":"14"},{"size":522,"mtime":1607513668156,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":1797,"mtime":1607696988425,"results":"18","hashOfConfig":"16"},{"size":198,"mtime":1607537034304,"results":"19","hashOfConfig":"16"},{"size":4782,"mtime":1607685173828,"results":"20","hashOfConfig":"16"},{"size":2848,"mtime":1607688876569,"results":"21","hashOfConfig":"16"},{"size":2638,"mtime":1607519316311,"results":"22","hashOfConfig":"16"},{"size":1042,"mtime":1607629379343,"results":"23","hashOfConfig":"16"},{"size":2224,"mtime":1607696677057,"results":"24","hashOfConfig":"16"},{"size":125,"mtime":1607441576030,"results":"25","hashOfConfig":"16"},{"size":3121,"mtime":1607696631279,"results":"26","hashOfConfig":"16"},{"size":3117,"mtime":1607695353388,"results":"27","hashOfConfig":"16"},{"size":4805,"mtime":1607685077379,"results":"28","hashOfConfig":"16"},{"size":265,"mtime":1607696095309,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"fyepg0",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\index.js",[],["62","63"],"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\reportWebVitals.js",[],"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\App.js",[],"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\HomePage.js",[],"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\EmailPage.js",["64","65"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: '75%',\r\n    }\r\n});\r\n\r\nconst EmailPage = ({ match }) => {\r\n    const classes = useStyles();\r\n    const history = useHistory()\r\n    var emailAccount = match.params.accountEmailAddress\r\n    let senderEmailId = match.params.senderEmailId\r\n    senderEmailId = parseInt(senderEmailId)\r\n\r\n    const [emailContent, setEmailContent] = useState([]);\r\n    const [open, setOpen] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const result = await fetch(`/api/email/${senderEmailId}/${emailAccount}`)\r\n                const body = await result.json()\r\n                setEmailContent([body])\r\n            } catch (err) {\r\n                console.log(`error: ${err}`)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [emailAccount]);\r\n\r\n    const deleteEmailFromDb = async (receiverEmailAddress, emailId) => {\r\n        try {\r\n            const result = await fetch('/api/deleteEmail', {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    receiverEmailAddress: receiverEmailAddress,\r\n                    id: emailId,\r\n                })\r\n            })\r\n            setOpen(false)\r\n            history.goBack()\r\n        } catch (err) {\r\n            console.log(`error: ${err}`)\r\n        }\r\n    }\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"page-body\">\r\n            <h1>Email content</h1>\r\n            <hr />\r\n            <div className=\"page-body\">{emailContent.map((content, key) => (\r\n                <Card className={classes.root}>\r\n                    <CardContent key={key}>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\" >\r\n                            Subject: {content.subject}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {content.date} at {content.time}\r\n                        </Typography>\r\n                        <h2>from : {content.senderEmailAddress}</h2>\r\n                        <div>Message:</div>\r\n                        <p> {content.messageContent}</p>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                            Delete\r\n                        </Button>\r\n                        <Dialog\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            aria-labelledby=\"alert-dialog-title\"\r\n                            aria-describedby=\"alert-dialog-description\"\r\n                        >\r\n                            <DialogTitle id=\"alert-dialog-title\">{\"You are about to DELETE that email\"}</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText id=\"alert-dialog-description\">\r\n                                    Pressing on the 'AGREE' button will delete this email permanently.\r\n                                </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\">\r\n                                    Disagree\r\n                                </Button>\r\n                                <Button onClick={() => deleteEmailFromDb(emailAccount, content.id)} color=\"primary\" autoFocus>\r\n                                    Agree\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                    </CardActions>\r\n                </Card>\r\n            ))}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default EmailPage","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\NavBar.js",[],"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\email-content.js",[],"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\EmailListPage.js",[],"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\components\\EmailList.js",[],"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\PageNotFound.js",[],"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\components\\SentEmailList.js",[],"C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\components\\ComposeEmailForm.js",["66"],"import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\n\r\nconst ComposeEmailForm = (props) => {\r\n    const [receiverEmailAddress, setReceiverEmailAddress] = useState('')\r\n    const [emailSubject, setEmailSubject] = useState('')\r\n    const [emailContent, setEmailContent] = useState('')\r\n    const senderEmailAddress = props.accountEmailAddress\r\n\r\n    const sendEmail = async () => {\r\n        var today = new Date(), date, time\r\n\r\n        date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n        time = today.getHours() + ':' + (today.getMinutes());\r\n\r\n        const result = await fetch(`/api/composeNewEmail`, {\r\n            method: 'post',\r\n            body: JSON.stringify({ senderEmailAddress, receiverEmailAddress, subject: emailSubject, messageContent: emailContent, date, time }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n        const body = await result.json()\r\n    }\r\n\r\n    return (\r\n        <div id=\"send-email-form\">\r\n            <h1>Compose New Email</h1>\r\n            <hr />\r\n            <form onSubmit={sendEmail}>\r\n                <TextField\r\n                    id=\"standard-full-width\"\r\n                    label=\"To:\"\r\n                    style={{ margin: 8 }}\r\n                    placeholder=\"example@email.com\"\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    value={receiverEmailAddress} onChange={(event) => setReceiverEmailAddress(event.target.value)}\r\n                    required=\"true\"\r\n                    type=\"email\"\r\n                />\r\n                <TextField\r\n                    id=\"standard-full-width\"\r\n                    label=\"Subject:\"\r\n                    style={{ margin: 8 }}\r\n                    placeholder=\"Email Title\"\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    value={emailSubject} onChange={(event) => setEmailSubject(event.target.value)}\r\n                />\r\n                <TextField\r\n                    id=\"outlined-full-width\"\r\n                    label=\"Email Content:\"\r\n                    style={{ margin: 8 }}\r\n                    placeholder=\"Write a message\"\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={emailContent} onChange={(event) => setEmailContent(event.target.value)}\r\n                    multiline=\"true\"\r\n                    rows=\"17\"\r\n                />\r\n                <Button variant=\"outlined\" color=\"primary\" type=\"submit\">\r\n                    Send Email\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComposeEmailForm","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\SentEmailPage.js",["67","68"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: '75%',\r\n    }\r\n});\r\n\r\nconst SentEmailPage = ({ match }) => {\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n    var emailAccount = match.params.accountEmailAddress\r\n    let senderEmailId = match.params.senderEmailId\r\n    senderEmailId = parseInt(senderEmailId)\r\n    const [emailContent, setEmailContent] = useState([])\r\n    const [open, setOpen] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const result = await fetch(`/api/spec-email-sent/${senderEmailId}/${emailAccount}`)\r\n                const body = await result.json()\r\n                setEmailContent([body])\r\n            } catch (err) {\r\n                console.log(`error: ${err}`)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [emailAccount])\r\n\r\n    const deleteEmailFromDb = async (receiverEmailAddress, emailId) => {\r\n        try {\r\n            const result = await fetch('/api/deleteSentEmail', {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    receiverEmailAddress: receiverEmailAddress,\r\n                    id: emailId,\r\n                })\r\n            })\r\n            setOpen(false)\r\n            history.goBack()\r\n        } catch (err) {\r\n            console.log(`error: ${err}`)\r\n        }\r\n    }\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"page-body\">\r\n            <h1>Sent Email content</h1>\r\n            <hr />\r\n            <div className=\"page-body\">{emailContent.map((content, key) => (\r\n                <Card className={classes.root}>\r\n                    <CardContent key={key}>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\" >\r\n                            Subject: {content.subject}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {content.date} at {content.time}\r\n                        </Typography>\r\n                        <h2>from: {content.receiverEmailAddress}</h2>\r\n                        <div>Message:</div>\r\n                        <p> {content.messageContent}</p>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                            Delete\r\n                        </Button>\r\n                        <Dialog\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            aria-labelledby=\"alert-dialog-title\"\r\n                            aria-describedby=\"alert-dialog-description\"\r\n                        >\r\n                            <DialogTitle id=\"alert-dialog-title\">{\"You are about to DELETE that email\"}</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText id=\"alert-dialog-description\">\r\n                                    Pressing on the 'AGREE' button will delete this email permanently.\r\n                                </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\">\r\n                                    Disagree\r\n                                </Button>\r\n                                <Button onClick={() => deleteEmailFromDb(emailAccount, content.id)} color=\"primary\" autoFocus>\r\n                                    Agree\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                    </CardActions>\r\n                </Card>\r\n            ))}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default SentEmailPage","C:\\Users\\guygo\\Desktop\\Herolo\\email-app\\src\\screens\\EmptyContentPage.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":42,"column":8,"nodeType":"75","endLine":42,"endColumn":22,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":46,"column":19,"nodeType":"79","messageId":"80","endLine":46,"endColumn":25},{"ruleId":"77","severity":1,"message":"81","line":25,"column":15,"nodeType":"79","messageId":"80","endLine":25,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":41,"column":8,"nodeType":"75","endLine":41,"endColumn":22,"suggestions":"82"},{"ruleId":"77","severity":1,"message":"78","line":45,"column":19,"nodeType":"79","messageId":"80","endLine":45,"endColumn":25},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'senderEmailId'. Either include it or remove the dependency array.","ArrayExpression",["85"],"no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","'body' is assigned a value but never used.",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"87","fix":"89"},"Update the dependencies array to be: [emailAccount, senderEmailId]",{"range":"90","text":"91"},{"range":"92","text":"91"},[1555,1569],"[emailAccount, senderEmailId]",[1565,1579]]